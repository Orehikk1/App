import SwiftUI

// 📌 Модель карточки (Card)
struct Card: Identifiable, Codable, Equatable {
    let id: UUID
    let title: String
    let content: String
    let imageName: String
    init(id: UUID = UUID(), title: String, content: String, imageName: String) {
        self.id = id
        self.title = title
        self.content = content
        self.imageName = imageName
    }
}

// 📌 Модель курса валют
struct ExchangeRateResponse: Codable {
    let conversion_rates: [String: Double]
}

// 📌 ViewModel (карточки, курс EUR → HUF)
class CardViewModel: ObservableObject {
    @Published var cards: [Card] = []
    @Published var euroToHufRate: Double? = nil

    init() {
        self.cards = loadCards()
        fetchExchangeRates()
    }

    // 📌 Получение курса EUR → HUF
    func fetchExchangeRates() {
        guard let url = URL(string: "https://v6.exchangerate-api.com/v6/e68a27854c27f7174870f216/latest/EUR") else {
            print("❌ Ошибка: Неверный URL")
            return
        }

        let task = URLSession.shared.dataTask(with: url) { data, _, error in
            guard let data = data, error == nil else {
                print("❌ Ошибка сети: \(error?.localizedDescription ?? "Неизвестная ошибка")")
                return
            }

            do {
                let decodedData = try JSONDecoder().decode(ExchangeRateResponse.self, from: data)
                DispatchQueue.main.async {
                    self.euroToHufRate = decodedData.conversion_rates["HUF"]
                }
            } catch {
                print("❌ Ошибка декодирования JSON: \(error)")
            }
        }
        task.resume()
    }
}

// 📌 Функция загрузки карточек из `cards.json`
func loadCards() -> [Card] {
    guard let url = Bundle.main.url(forResource: "cards", withExtension: "json") else {
        print("❌ Файл `cards.json` не найден!")
        return []
    }
    do {
        let data = try Data(contentsOf: url)
        let decodedCards = try JSONDecoder().decode([Card].self, from: data)
        return decodedCards
    } catch {
        print("❌ Ошибка декодирования JSON: \(error)")
        return []
    }
}

// 📌 Главное окно (карточки, курс EUR → HUF)
struct ContentView: View {
    @StateObject private var viewModel = CardViewModel()
    let columns = [GridItem(.adaptive(minimum: 150), spacing: 20)]

    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // 📌 Курс валют EUR → HUF
                    VStack {
                        if let euroToHufRate = viewModel.euroToHufRate {
                            Text("Exchange Rate: 1 EUR = \(euroToHufRate, specifier: "%.2f") HUF")
                                .font(.title2)
                                .bold()
                                .foregroundColor(.black)
                        } else {
                            Text("Loading exchange rate EUR → HUF...")
                                .foregroundColor(.gray)
                                .font(.body)
                        }
                    }
                    .padding(.top, 10)

                    // 📌 Заголовок
                    Text("Information for Guides")
                        .font(.largeTitle)
                        .bold()
                        .foregroundColor(.primary)
                        .padding(.top)

                    // 📌 Текст на главной странице
                    VStack(alignment: .leading, spacing: 10) {
                        Text("""
                        This short book was written for the guides of Segway tours, and it contains all the information you need about buildings and monuments during the stops of our tours.
                        """)
                        Text("""
                        - **Regular History** will be marked with a **#** sign.
                        - **Segway stop History** will be marked with a **•** sign.
                        """)
                        .font(.headline)
                        Text("""
                        The reason why you should know all this is that some tourists might ask more questions about the past of the city and the country. We really hope this guide is understandable and clear.
                        """)
                    }
                    .font(.body)
                    .foregroundColor(.primary)
                    .padding()
                    .background(Color(UIColor.systemGray6))
                    .clipShape(RoundedRectangle(cornerRadius: 15))
                    .padding(.horizontal)

                    // 📌 Карточки
                    LazyVGrid(columns: columns, spacing: 20) {
                        ForEach(viewModel.cards) { card in
                            NavigationLink(destination: CardDetailView(card: card)) {
                                CardView(card: card)
                            }
                            .buttonStyle(PlainButtonStyle())
                        }
                    }
                    .padding()

                    Text("Written by Ernő Gáspár")
                        .font(.footnote)
                        .foregroundColor(.gray)
                        .padding(.bottom, 20)
                }
            }
        }
    }
}

// 📌 Вид карточки
struct CardView: View {
    let card: Card
    var body: some View {
        VStack {
            Image(card.imageName)
                .resizable()
                .scaledToFill()
                .frame(width: 150, height: 150)
                .clipShape(RoundedRectangle(cornerRadius: 20))
                .shadow(radius: 5)
            Text(card.title)
                .font(.headline)
                .foregroundColor(.primary)
                .multilineTextAlignment(.center)
                .frame(width: 150, height: 40)
        }
        .contentShape(Rectangle())
    }
}

// 📌 Детальный экран карточки (с фото внутри текста)
struct CardDetailView: View {
    let card: Card
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 15) {
                let sections = parseContent(card.content)

                ForEach(sections.indices, id: \.self) { index in
                    let section = sections[index]

                    if section.starts(with: "[IMAGE:") {
                        let imageName = section
                            .replacingOccurrences(of: "[IMAGE:", with: "")
                            .replacingOccurrences(of: "]", with: "")

                        if let uiImage = UIImage(named: imageName) {
                            Image(uiImage: uiImage)
                                .resizable()
                                .scaledToFit()
                                .cornerRadius(15)
                                .padding(.vertical, 10)
                        } else {
                            Text("⚠️ Image '\(imageName)' not found!")
                                .foregroundColor(.red)
                                .font(.caption)
                        }
                    } else {
                        Text(section)
                            .font(.body)
                            .foregroundColor(.primary)
                            .padding(.vertical, 5)
                    }
                }
            }
            .padding()
        }
        .navigationTitle(card.title)
    }
}

// 📌 Функция разделения текста (без нумерации)
func parseContent(_ content: String) -> [String] {
    return content.components(separatedBy: "\n\n")
}

// 📌 Запуск приложения
@main
struct GuideApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}
